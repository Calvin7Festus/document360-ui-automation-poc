openapi: 3.0.0

info:
  title: Simple User Management API
  version: 2.0.0
  description: A YML format API definition for user management operations
  contact:
    name: API Support Team
    email: support@example.com
    url: https://example.com/support
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  termsOfService: https://example.com/terms

servers:
  - url: https://api.example.com/v2
    description: Production server
  - url: https://staging-api.example.com/v2
    description: Staging server

tags:
  - name: users
    description: User management operations
  - name: profiles
    description: User profile operations

paths:
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Retrieve a list of all users in the system
      operationId: getAllUsers
      parameters:
        - name: limit
          in: query
          description: Maximum number of users to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of users to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  total:
                    type: integer
                    example: 100
                  limit:
                    type: integer
                    example: 10
                  offset:
                    type: integer
                    example: 0

    post:
      tags:
        - users
      summary: Create a new user
      description: Create a new user in the system
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The user ID
          schema:
            type: string
            example: "123"
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "123"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - username
        - email
        - firstName
        - lastName

    UserInput:
      type: object
      properties:
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
      required:
        - username
        - email
        - firstName
        - lastName

    Error:
      type: object
      properties:
        code:
          type: string
          example: "USER_NOT_FOUND"
        message:
          type: string
          example: "User with ID 123 not found"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - code
        - message
        - timestamp
